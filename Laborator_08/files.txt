#include <iostream>
 
/** Pentru a utiliza fisiere,
 trebuie folosita biblioteca fstream*/
 
/// Step 1:
 
#include <fstream>
 
/** Pentru a deschide un fisier se foloseste tipul
de date ifstream pentru citire si ofstream pentru scriere
in fisier (i - input)  (o - output)*/
 
/// Step 2
/// Sintaxa generala pentru intrare: ifstream nume_stream("nume_fisier.txt");
 
ifstream fin("text.in");
 
/// Step 3
/// Sintaxa generala pentru iesire: ofstream nume_stream("nume_fisier");
 
ofstream fout("texto.out");
 
/// HINT: obiectele de tip ifstream si ofstream, in cazul de fata
/// "fin" si "fout" se comporta foarte similar cu "cin" si "cout" din iostream
 
/// spre exemplu similar cu o afisare pe ecran cu cout, avand sintaxa cout << "Mesaj",
/// putem scrie un fisier cu comanda nume_stream << "Mesaj"; (ex: fout << "Mesaj";)
 
 
using namespace std;
 
int main()
{
 
    /// Diverse tooluri din interiorul obiectelor de tip ifstream sau ofstream
 
    /// Tool 1:
    /// Pentru a citi un caracter/numar/simbol se foloseste sintaxa
 
    int n;
    char c;
    fin >> n >> c; /// identic cu fin >> n; fin >> c;
 
    /// Tool 2:
    /// .get()
 
    ///Pentru a citi un caracter se foloseste functia .get in configuratia urmatoare
    /// nume_stream.get(caracter);
 
    char c;
    fin.get(c);
 
    /// Tool 3;
    ///.getline();
    ///Pentru a citi un array de caractere se foloseste: nume_stream.getline(sir, dimensiune);
 
    char s[51]; /// declaram 51 de caractere intr-un array;
 
    fin.getline(s, 50); /// 50 repr. numarul de caractere pe care o dorim sa le citim
    fin.getline(s, 25); /// citeste din fisier 25 de caractere
 
    ///HINT: Aproape toate functiile disponibile in obiectele de afisare de fisiere pot fi
    /// folosite si cu cin sau cu cout ;)
 
    /// Tool 4
    /// Citire caracter cu caracter dintr-un fisier
    /// De retinut este faptul ca functia .get(caracter) returneaza(are valoarea 1) in momentul in care
    /// aceasta a citit un caracter. Putem folosi acest lucru in avantajul nostru.
    /// Instructiunea while executa aceeasi bucata de cod pana in momentul in care conditia din paranteze
    /// este falsa
 
    ///Spre exemplu:
     while(1 < 3) /// va rula la infinit, 1 < 3 fiind oricand adevarat
    /// in general bucla while este folosita impreuna cu o variabila ajutatoare
    /// ex:
    int i = 0;
    while(i < 3) i++; /// Pas 1                 :  Pas 2            : Pas 3           : Pas 4
                      /// i = 0, 0 < 3 adevarat;| i = 1, 1 < 3 adev. | i = 2 2 < 3 adev. | i = 3 3 < 3 fals
    /// si programul iese din instructiunea while, reluand rularea normala a programului.
    /// while are drept efect repetarea unei instructiuni !cat timp! aceasta este adevarata.
 
    ///Utilizare la citirea sirurilor (arrayurilor) de caractere;
 
    while(fin.get(c))
    {
        cout << c; /// programul are ca efect afisarea valorilor din fisierul streamului fin pe ecran.
        /// In momentul in care nu mai sunt caractere in fisier, .get devine 0 si se incheie ciclul while.
    }
 
    /// HINT:
    /// Bun, bun acum ca stim sa deschidem fisiere, sa scriem si sa citim, trebuie sa le si inchidem.
    /// Pentru a inchide un fisier se foloseste comanda nume_stream.close();
 
    fin.close();
    fout.close();
 
    /// Extra HINT: Pentru a verifica intr-o structura repetitiva while daca am ajuns la capatul unui fisier
    /// text se foloseste conditia nume_stream.eof() -> eof vine de la end of file
    /// eof este 0 daca mai exista caractere si 1 cand fisierul este citit complet
 
    /// pentru a o folosi spre avantajul nostru, negam expresia, acesta devanind 1 in caz de citire posibila
    /// si 0 in caz contrar | sintaxa : !nume_stream.eof(), ! este operatorul de negare in c++
 
    while(!fin.eof())
    {
        /// do something
    }
 
    /// You made it. Here is the reward :) https://www.youtube.com/shorts/wEUtLlBMadw
    return 0;
}
 